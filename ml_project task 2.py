# -*- coding: utf-8 -*-
"""iris

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YBwPmic17p3X26vOD1dVMFfCwbBijL_S
"""



# Import required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Create a small dataset
# Example dataset with one feature (X) and one target variable (y)
data = {
    'Feature': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Target': [1.5, 2.1, 3.2, 4.0, 5.1, 6.3, 7.0, 8.4, 9.2, 10.1]
}
df = pd.DataFrame(data)

# Step 2: Split the dataset into training and testing sets
X = df[['Feature']]  # Feature column (input)
y = df['Target']     # Target column (output)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Make predictions
y_pred = model.predict(X_test)

# Step 5: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

# Step 6: Visualize the regression line
plt.scatter(X, y, color='blue', label='Data points')  # Scatter plot of the data
plt.plot(X, model.predict(X), color='red', label='Regression line')  # Regression line
plt.xlabel('Feature')
plt.ylabel('Target')
plt.title('Linear Regression')
plt.legend()
plt.show()







